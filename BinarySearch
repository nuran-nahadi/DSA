int binarySearch(int a[] , int key,int size)
{
    int left = 0;
    int right = size - 1;
    int mid = size / 2;
    while (left < right)
    {
        mid = (left + right) / 2;
        // mid = left + (right - left) / 2;
        if (a[mid] == key)
        {
            return mid;
        }
        if (key > a[mid])
            left = mid + 1;

        else if (key < a[mid])
            right = mid - 1;
    }

    return -1;
}

double bisection_root(double l,double r,double a)
{
    double x = l+(r-l)/2;
    
    if (x*x < a)
    {
        return bisection(x,r,a);
    }
    else if (x*x > a)
    {
        return bisection(l,x,a);
    }
    else if(abs(x*x - a)<=err)
    return x;
    
}
